{"version":3,"sources":["JSX/Sections/Topnav/index.js","JSX/Components/SMSInput/index.js","JSX/Components/PriceCalculation/index.js","JSX/Components/SMSShowcase/index.js","JSX/Components/SMSSend/index.js","JSX/Sections/Messaging/index.js","JSX/Sections/NewsletterSignup/index.js","JSX/Sections/FAQ/index.js","JSX/Sections/Footer/index.js","JSX/Pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Topnav","props","AppBar","position","className","Toolbar","Typography","variant","SMSInput","TextField","margin","fullWidth","label","type","min","step","value","contactCounter","onChange","e","currentTarget","handleSetContactCounter","onBlur","Number","Math","floor","multiline","rows","message","charcount","trim","length","SMS_CHAR_LIMIT","handleSetCharCounter","handleSetSMSCounter","ceil","parseFloat","handleSetMessage","charCounter","smsCounter","PriceCalculation","messageCount","subtotal","tax","totalCost","fontSize","numeral","format","UNIT_PRICE_CENTS","splitSMS","sms","smsCharLimit","lengthToSlice","singleSMS","slice","remainingMessage","SMSShowcase","smsArr","tempSms","result","push","map","currSMS","i","key","SMSSend","useState","isSending","setSending","Button","onClick","setTimeout","disableElevation","disabled","style","right","top","transform","CircularProgress","size","Messaging","setContactCounter","setCharCounter","setSMSCounter","setMessage","Container","maxWidth","Grid","container","spacing","item","xs","sm","md","NewsletterSignup","lg","noValidate","autoComplete","color","FAQ","Accordion","AccordionSummary","expandIcon","AccordionDetails","Footer","src","alt","height","width","Home","state","name","React","Component","theme","createMuiTheme","palette","primary","main","secondary","App","to","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c72cd8d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Topnav = (props) => {\r\n  return (\r\n    <AppBar position=\"static\" className=\"bg-primary shadow-none\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" className=\"mr-auto\">Sending...</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Topnav;\r\n","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\n\r\nconst SMSInput = (props) => {\r\n  const handleContactChange = (e) => {\r\n    let value = e.currentTarget.value;\r\n    props.handleSetContactCounter(value);\r\n  }\r\n\r\n  const handleContactBlur = (e) => {\r\n    let value = Number(props.contactCounter);\r\n    if (value > 0) {\r\n      value = Math.floor(value);\r\n    } else {\r\n      value = 0;\r\n    }\r\n    props.handleSetContactCounter(Number(value));\r\n  }\r\n\r\n  const handleMessageChange = (e) => {\r\n    let value = e.currentTarget.value;\r\n    let charcount = value.trim().length;\r\n    // Show full SMS_CHAR_LIMIT letter count for each msg when not the first msg\r\n    if (charcount % props.SMS_CHAR_LIMIT === 0 && charcount > 0) {\r\n      props.handleSetCharCounter(props.SMS_CHAR_LIMIT);\r\n    } else {\r\n      props.handleSetCharCounter(charcount % props.SMS_CHAR_LIMIT);\r\n    }\r\n    // Each msg is SMS_CHAR_LIMIT (180) chars long. Partial msgs are billed as 1 msg\r\n    props.handleSetSMSCounter(Math.ceil(charcount / parseFloat(props.SMS_CHAR_LIMIT)));\r\n    props.handleSetMessage(value);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"mb-5\">\r\n      <TextField\r\n        margin=\"dense\" variant=\"outlined\" fullWidth={true}\r\n        label=\"Contacts\" type=\"number\" min=\"0\" step=\"1\"\r\n        value={props.contactCounter}\r\n        onChange={handleContactChange}\r\n        onBlur={handleContactBlur}\r\n        className=\"mb-3\"\r\n      />\r\n      <TextField\r\n        multiline rows={6} variant=\"outlined\" fullWidth={true}\r\n        label=\"Message\"\r\n        value={props.message}\r\n        onChange={handleMessageChange}\r\n      />\r\n      <div className=\"d-flex\">\r\n        <span className=\"mr-auto b-600\">{props.charCounter}/180 ({props.smsCounter} SMS)</span>\r\n        <span className=\"b-600\">{props.smsCounter * props.contactCounter} <ChatIcon className=\"text-primary ml-1\" /></span>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        <span className=\"ml-auto\">({props.smsCounter} SMS &times; {props.contactCounter} contacts)</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SMSInput;\r\n","import React from \"react\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport * as numeral from \"numeral\";\r\n\r\nconst UNIT_PRICE_CENTS = 30;\r\nconst UNIT_COST_CENTS = 5;\r\n\r\nconst PriceCalculation = (props) => {\r\n  const messageCount = props.contactCounter * props.smsCounter;\r\n  const subtotal = messageCount * UNIT_PRICE_CENTS / 100;\r\n  const tax = subtotal / 10;\r\n\r\n  const totalCost = messageCount * UNIT_COST_CENTS / 100;\r\n  const margin = subtotal + tax - totalCost;\r\n  return (\r\n    <div className=\"d-flex flex-column flex-md-row align-items-start\">\r\n      <div className=\"pl-0 order-2 order-md-1 col-auto d-flex align-items-center\">\r\n        <LockIcon fontSize=\"large\" />\r\n        <div className=\"d-flex flex-column\">\r\n          <b>Encrypted</b>\r\n          <b>Messaging</b>\r\n        </div>\r\n      </div>\r\n      <div className=\"mb-4 pr-0 col order-1 order-md-2\">\r\n        <div className=\"d-flex b-500\">\r\n          <span className=\"d-inline-block mr-2\">Subtotal</span>\r\n          <span className=\"ml-auto d-inline-block\">{numeral(subtotal).format(\"$0,0.00\")}</span>\r\n        </div>\r\n        <div className=\"d-flex\">\r\n          <span className=\"ml-auto d-inline-block\">({messageCount} &times; {numeral(UNIT_PRICE_CENTS / 100).format(\"$0,0.00\")})</span>\r\n        </div>\r\n        <div className=\"d-flex b-500\">\r\n          <span className=\"d-inline-block mr-2\">Tax (10%)</span>\r\n          <span className=\"ml-auto d-inline-block\">{numeral(tax).format(\"$0,0.00\")}</span>\r\n        </div>\r\n        <h6 className=\"d-flex h2\">\r\n          <span className=\"d-inline-block mr-2\">TOTAL</span>\r\n          <span className=\"ml-auto d-inline-block\">{numeral(subtotal + tax).format(\"$0,0.00\")}</span>\r\n        </h6>\r\n        <div className=\"d-flex\">\r\n          <span className=\"ml-auto d-inline-block\">cost: {numeral(totalCost).format(\"$0,0.00\")}</span>\r\n        </div>\r\n        <div className=\"d-flex\">\r\n          <span className=\"ml-auto d-inline-block\">profit: {numeral(margin).format(\"$0,0.00\")}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PriceCalculation;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nconst SMSShowcase = (props) => {\r\n  const smsArr = [];\r\n  // splitSMS(props.message, props.SMS_CHAR_LIMIT);\r\n  let tempSms = props.message;\r\n  while (tempSms.length > 0) {\r\n    let result = splitSMS(tempSms, props.SMS_CHAR_LIMIT);\r\n    smsArr.push(result.singleSMS);\r\n    tempSms = result.remainingMessage;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"showcaseWindow card border mb-5 mt-2\">\r\n        <div className={smsArr.length > 0 ? \"card-body p-4\": \"card-body p-4 d-flex align-items-center justify-content-center\"}>\r\n          {\r\n            smsArr.length > 0 ?\r\n              smsArr.map((currSMS, i) =>\r\n                <div key={i} className=\"p-4 mb-3 showcaseSMS bg-primary-light text-light rounded-lg\">\r\n                  {currSMS}\r\n                </div>\r\n              ) : <p className=\"m-0 text-center text-muted\">Enter a message</p>\r\n          }\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst splitSMS = (sms, smsCharLimit) => {\r\n  const lengthToSlice = sms.length >= smsCharLimit ? smsCharLimit : sms.length;\r\n  const firstPart = sms.slice(0, lengthToSlice);\r\n  const secondPart = sms.slice(lengthToSlice);\r\n  return {\r\n    singleSMS: firstPart,\r\n    remainingMessage: secondPart\r\n  }\r\n}\r\n\r\nexport default SMSShowcase;\r\n","import React, { useState } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst SMSSend = (props) => {\r\n  const [isSending, setSending] = useState(false);\r\n\r\n  const sendMessage = () => {\r\n    setSending(true);\r\n    setTimeout(() => {\r\n      setSending(false);\r\n    },3000);\r\n  }\r\n\r\n  // NOTE: trim() message before sending\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={() => { sendMessage() }}\r\n        variant=\"contained\"\r\n        disableElevation\r\n        fullWidth={true}\r\n        disabled={isSending}\r\n        className=\"btn-secondary position-relative\">\r\n        {isSending ? \"SENDING...\" : \"SEND\"}\r\n        <div className=\"position-absolute d-flex align-items-center\"\r\n          style={{ right: \"0.5rem\", top: \"50%\", transform: \"translateY(-50%)\" }}>\r\n          {isSending ? <CircularProgress size={20} /> : <SendIcon />}\r\n        </div>\r\n      </Button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SMSSend;\r\n","import React, { useState } from \"react\";\r\n\r\nimport SMSInput from \"../../Components/SMSInput\";\r\nimport PriceCalculation from \"../../Components/PriceCalculation\";\r\nimport SMSShowcase from \"../../Components/SMSShowcase\";\r\nimport SMSSend from \"../../Components/SMSSend\";\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst SMS_CHAR_LIMIT = 180;\r\n\r\nconst Messaging = (props) => {\r\n  const [contactCounter, setContactCounter] = useState(0);\r\n\r\n  const [charCounter, setCharCounter] = useState(0);\r\n  const [smsCounter, setSMSCounter] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const handleSetContactCounter = (value) => {\r\n    setContactCounter(value);\r\n  }\r\n\r\n  const handleSetCharCounter = (value) => {\r\n    setCharCounter(value);\r\n  }\r\n\r\n  const handleSetSMSCounter = (value) => {\r\n    setSMSCounter(value);\r\n  }\r\n\r\n  const handleSetMessage = (value) => {\r\n    setMessage(value);\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth={false}>\r\n      <Container maxWidth=\"md\" className=\"py-5\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6} md={7}>\r\n            <SMSInput\r\n              contactCounter={contactCounter}\r\n              handleSetContactCounter={handleSetContactCounter}\r\n              charCounter={charCounter}\r\n              handleSetMessage={handleSetMessage}\r\n              smsCounter={smsCounter}\r\n              handleSetSMSCounter={handleSetSMSCounter}\r\n              message={message}\r\n              handleSetCharCounter={handleSetCharCounter}\r\n              SMS_CHAR_LIMIT={SMS_CHAR_LIMIT}\r\n            ></SMSInput>\r\n            <PriceCalculation\r\n              contactCounter={contactCounter}\r\n              smsCounter={smsCounter}\r\n            ></PriceCalculation>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={5}>\r\n            <SMSShowcase\r\n              message={message}\r\n              SMS_CHAR_LIMIT={SMS_CHAR_LIMIT}\r\n            ></SMSShowcase>\r\n            <SMSSend></SMSSend>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Messaging;\r\n","import React from \"react\";\r\n\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst NewsletterSignup = (props) => {\r\n  return (\r\n    <Container maxWidth={false} className=\"bg-primary\">\r\n      <Container maxWidth=\"md\" className=\"py-5 text-light\">\r\n        <Typography variant=\"h5\" className=\"mb-5 text-center text-light\">Sign up for accounts</Typography>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={7} md={8} lg={9}>\r\n            <p>User accounts are not available at this time so please enter your email if you are interested in this service. We will create an account for you using this email and notify you when it is ready.</p>\r\n            <p className=\"m-0\"><b>Sign up for updates on:</b></p>\r\n            <ul>\r\n              <li>When user accounts are ready</li>\r\n              <li>New features</li>\r\n            </ul>\r\n          </Grid>\r\n          <Grid item xs={12} sm={5} md={4} lg={3}>\r\n            <form noValidate autoComplete=\"off\" className=\"d-flex flex-column\">\r\n              <TextField label=\"Email\" margin=\"dense\" variant=\"outlined\" color=\"secondary\" className=\"mb-3 text-white\"/>\r\n              <Button variant=\"contained\" disableElevation className=\"bg-very-dark text-light\">SEND</Button>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NewsletterSignup;\r\n","import React from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst FAQ = (props) => {\r\n  return (\r\n    <Container maxWidth=\"md\" className=\"pt-5 mb-5\">\r\n      <Typography variant=\"h5\" className=\"mb-5 text-center text-light\">FAQs</Typography>\r\n      <Accordion>\r\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n          <Typography >Can I view previous my messages</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            Not at the moment but please provide your email address and we will send a copy to you. You will be notified when our account features are ready and you will be then able to set up your account and view your previous messages.\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion>\r\n        <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n          <Typography >Is there a way to import contacts?</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            This feature is not currently available but we are actively working on it and hope to have it ready soon.\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion>\r\n        <AccordionSummary expandIcon={<ExpandMoreIcon />} >\r\n          <Typography >How will I be charged?</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            Currently the service is free for the first 100 messages sent per month. Once this offer has ended, a prompt for your payment details, by any major credit card provider, will appear before your message can be send.\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FAQ;\r\n","import React from \"react\";\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <Container maxWidth=\"md\" className=\"py-5\">\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n        <h6 className=\"text-muted\">&copy;Copyright 2020</h6>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <h6 className=\"mb-3 text-muted\">Address</h6>\r\n          <b >123 Street Sydney, 2000</b>\r\n\r\n          <h6 className=\"mb-3 mt-4 text-muted\">Phone</h6>\r\n          <b>04 1234 1234</b>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <h6 className=\"text-muted\">Made using</h6>\r\n          <img src=\"https://www.twilio.com/marketing/bundles/company-brand/img/logos/red/twilio-logo-red.png\" alt=\"Twilio logo\" height=\"40px\" width=\"auto\"/>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nimport Topnav from \"../../Sections/Topnav\";\r\nimport Messaging from \"../../Sections/Messaging\";\r\nimport NewsletterSignup from \"../../Sections/NewsletterSignup\";\r\nimport FAQ from \"../../Sections/FAQ\";\r\nimport Footer from \"../../Sections/Footer\";\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport \"./styles.scss\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"asdf\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Topnav></Topnav>\r\n        <Container maxWidth={false}>\r\n          <Container maxWidth=\"md\" className=\"pt-5\">\r\n            <Typography variant=\"h4\" className=\"mb-4\">Mass Messaging</Typography>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={6}>\r\n                <p>\r\n                  This is a service for sending SMS messages to multiple contacts at once with a fixed price per message.\r\n                </p>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <ul>\r\n                  <li>Fixed rate of $0.30 per message\r\n                    <br />\r\n                    <span className=\"text-muted small\">(Unit message price is not inclusive of tax)</span>\r\n                  </li>\r\n                </ul>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </Container>\r\n\r\n        <Messaging></Messaging>\r\n\r\n        <NewsletterSignup></NewsletterSignup>\r\n        <Container maxWidth={false} className=\"bg-gradient\">\r\n          <FAQ></FAQ>\r\n          <Footer></Footer>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Home from \"./JSX/Pages/Home\";\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#000\",\r\n    },\r\n    secondary: {\r\n      main: \"#fff\",\r\n    }\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <Switch>\r\n        <Route to=\"/\" exact component={Home} />\r\n      </Switch>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/bootstrap/styles.scss';\r\nimport './assets/css/app-styles/styles.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}